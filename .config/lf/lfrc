# vim:ft=conf
# set icons
# set drawbox
# set nopreview
set ratios 1:3:2
set hidden
set mouse
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 8
set cursorpreviewfmt "\033[7m"

map <enter> shell
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map V :invert-below
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
cmd mkdir %IFS=" "; mkdir -- "$*"
map a push :mkdir<space>
map ; push :
map gc cd ~/.config/
map gs cd ~/storage/shared/
map gd cd ~/storage/downloads/
map gm cd ~/storage/music/
map gv cd ~/storage/movies/

## autojump
# cmd aj %lf -remote "send $id cd '$(autojump $1 } sed 's/\\/\\\\/g;s/"/\\"/g')'"
# map a push :aj<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd delete %{{ rm -rf $fx }}
map D delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    for f in $fx; do
        x "$f" || continue
    done
}}
map E extract

# compress current file or selected files with tar and gunzip
cmd tar ${{
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd zstd ${{
    tar -I 'zstd' -cvf "$f".tar.zst "$fx"
}}

# edit config
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map C edit-config

map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open

cmd bulkrename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
map R bulkrename

cmd one_column %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1"
    else
        lf -remote "send $id :set ratios 1:3:2; set preview true"
    fi
}}
map zz one_column

cmd preview !{{
    chafa "$f"
}}
map I preview
map i $bat --paging=always --pager="less --RAW-CONTROL-CHARS --incsearch --ignore-case --mouse" $f

cmd z %{{
    result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}


setlocal /data/data/com.termux/files/home/storage/downloads/ sortby ctime
setlocal /data/data/com.termux/files/home/storage/downloads/ reverse
setlocal /data/data/com.termux/files/home/storage/music/ sortby atime
setlocal /data/data/com.termux/files/home/storage/music/ reverse
